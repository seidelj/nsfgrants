<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER:VARIATIONAL EXECUTION</AwardTitle>
    <AwardEffectiveDate>04/01/2016</AwardEffectiveDate>
    <AwardExpirationDate>03/31/2021</AwardExpirationDate>
    <AwardAmount>223098</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Many software systems can be configured by enabling or disabling&lt;br/&gt;configuration options. As options can be combined flexibly, the&lt;br/&gt;configuration space grows exponentially. Therefore highly-configurable systems are notoriously hard to test. While many combinations of options work well, specific configurations may expose faulty or surprising behavior emerging from interactions among options. Due to the huge search space, interactions are difficult to find. In fact, since no complete and sound techniques exist to study interactions in large scale systems, little is known about interactions in practice. This research&lt;br/&gt;explores a novel program execution technique, variational execution, to efficiently execute a large number of configurations or similar programs and inspect the differences among those executions. &lt;br/&gt;&lt;br/&gt;Variational execution will aid understanding and detection of interactions among configuration options in highly-configurable software systems and contribute to better quality assurance and development methods. It will transform the way to test configurable systems, including most of today?s end-user software, software ecosystems, and critical&lt;br/&gt;infrastructure software, such as SSL libraries and databases. The insights gained into interactions in real-world systems fill an important gap in our understanding of interactions, relevant for teaching software design and quality assurance. Additionally, it will enable advances in exploring interactions and large search spaces for broader software engineering purposes, including higher-order mutation testing, program repair, and sensitivity analysis.</AbstractNarration>
    <MinAmdLetterDate>03/24/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>03/24/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1552944</AwardID>
    <Investigator>
      <FirstName>Christian</FirstName>
      <LastName>Kastner</LastName>
      <EmailAddress>kaestner@cmu.edu</EmailAddress>
      <StartDate>03/24/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
  </Award>
</rootTag>
