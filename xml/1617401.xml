<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Design and Inference of Choreography Types to Reduce Concurrency Programming Errors</AwardTitle>
    <AwardEffectiveDate>06/01/2016</AwardEffectiveDate>
    <AwardExpirationDate>05/31/2019</AwardExpirationDate>
    <AwardAmount>500000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>With the growth of the web, cloud computing, sensor networks and&lt;br/&gt;multicore programming, concurrency has become critical to software&lt;br/&gt;applications in the real world. Because the Actor model of concurrent&lt;br/&gt;computation provides scalable concurrency, commercial software is&lt;br/&gt;often written using the Actor model. Many concurrency related errors&lt;br/&gt;such as unprocessable messages, deadlocks, and livelocks result from a&lt;br/&gt;mismatch of component actors in a system. The research develops&lt;br/&gt;choreography types as a method to understand concurrency structures&lt;br/&gt;and detect concurrency related bugs. The intuition behind the&lt;br/&gt;research is that combining symbolic execution with information from&lt;br/&gt;concrete traces obtained during unit testing can provide a way to&lt;br/&gt;infer and approximate choreography types.&lt;br/&gt;&lt;br/&gt;The research would make concurrent and distributed programming&lt;br/&gt;safer--increasing trust in applications such as cloud computing on&lt;br/&gt;which a large part of the US economy is dependent today. Much as data&lt;br/&gt;types help programmers think about the interfaces of components in a&lt;br/&gt;sequential program, the research would provide ways in which&lt;br/&gt;programmers can think about the structure of parallel programs in&lt;br/&gt;terms of choreographing actors with evolving type structure. The&lt;br/&gt;educational impact of the research is to facilitate teaching scalable&lt;br/&gt;parallel programming, creating tools that expose and facilitate the&lt;br/&gt;understanding of the structure of concurrent programs.</AbstractNarration>
    <MinAmdLetterDate>05/19/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>05/19/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1617401</AwardID>
    <Investigator>
      <FirstName>Gul</FirstName>
      <LastName>Agha</LastName>
      <EmailAddress>agha@illinois.edu</EmailAddress>
      <StartDate>05/19/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Illinois at Urbana-Champaign</Name>
      <CityName>CHAMPAIGN</CityName>
      <ZipCode>618207473</ZipCode>
      <PhoneNumber>2173332187</PhoneNumber>
      <StreetAddress>SUITE A</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Illinois</StateName>
      <StateCode>IL</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
  </Award>
</rootTag>
