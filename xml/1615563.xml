<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Automatically Localizing Functional Faults In Deployed Software Applications</AwardTitle>
<AwardEffectiveDate>07/15/2016</AwardEffectiveDate>
<AwardExpirationDate>06/30/2019</AwardExpirationDate>
<AwardAmount>350896</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Sol J. Greenspan</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Even though most software applications are tested before they are released to customers, these applications still contain production (or field) functional faults that result in field failures, which have costly consequences and are expensive to fix. Due to their limitations, existing automatic debugging approaches do not adequately isolate and identify production faults for field failures.  Prior interviews of test managers and studies of bug repositories revealed that programmers spent close to 50% of their time on average to localize production faults, which is a major factor in software system and software project failures. The educational innovation of this project is in developing an integrated approach to teaching by applying probabilistic graphical models to software engineering problems.&lt;br/&gt; &lt;br/&gt;The goal of this proposal is to create a novel theoretical foundation that allows stakeholders to predict and localize functional faults for field failures automatically with a high degree of precision using symptoms only (e.g., the sign of the output value is incorrect) and without instrumenting deployed applications to collect runtime data, thus avoiding the deployment runtime overhead, and without having any tests with oracles to uncover the fault, without performing contrasting successful and failed runs, and without collecting runtime data from field failures. With this theoretical foundation, researchers can collaborate more closely in planning the future of fault localization by expanding each other's results based on probabilistic graphical models as common abstractions.  Based only on failure symptoms occurring during deployment of a given application, the location of faults in the source code will be determined, as well as navigation paths from likely faults to the code that can fix these faults. The project will create, evaluate and deploy: (1) new theories, algorithms and techniques for automatically obtaining probabilistic graphical models that approximate specific fault models for software applications; (2) a novel way in which model-based differential diagnoses are used to perform abductive reasoning to localize production faults given symptoms for field failures, and (3) a comprehensive experimentation framework for evaluating the effectiveness of the algorithms for localizing production faults. In addition to localizing production functional faults, the implementation can be used as a broad experimental platform for creating and testing hypotheses for various software debugging and testing ideas, e.g., for guiding test selection and prioritization.</AbstractNarration>
<MinAmdLetterDate>07/08/2016</MinAmdLetterDate>
<MaxAmdLetterDate>07/08/2016</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>1615563</AwardID>
<Investigator>
<FirstName>Mark</FirstName>
<LastName>Grechanik</LastName>
<EmailAddress>drmark@uic.edu</EmailAddress>
<StartDate>07/08/2016</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Illinois at Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606124305</ZipCode>
<PhoneNumber>3129962862</PhoneNumber>
<StreetAddress>809 S MARSHFIELD</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
</Institution>
<ProgramElement>
<Code>7798</Code>
<Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7944</Code>
<Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
</ProgramReference>
</Award>
</rootTag>
