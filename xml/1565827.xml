<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CRII: SHF: Analysis and Automation of Global Systematic Changes</AwardTitle>
    <AwardEffectiveDate>03/15/2016</AwardEffectiveDate>
    <AwardExpirationDate>02/28/2018</AwardExpirationDate>
    <AwardAmount>175000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Software version history captures how software evolves, records application-specific domain knowledge, and tracks success as well as failure in the software maintenance. By learning from software evolution history, researchers can leverage the knowledge to help improve programmer productivity and software quality. However, the ?big data? aspect of software version history presents challenges. It requires sophisticated program analysis and automated tools to identify project-specific knowledge and to suggest coding accordingly to developers. Existing solutions are only capable of identifying and automating simple code changes. The objective of this research is to advance the state-of-the-art programming knowledge discovery and suggestion through innovations in automatic inference and application of program transformations.&lt;br/&gt;&lt;br/&gt;This project will characterize recurring global edits in software, and investigate tools to fully automate the crucial process to generalize, locate, and apply complicated program transformations based on code change examples. The unifying theme of this research is the judicious application of inter-procedural program analysis and constraint solving techniques. Inter-procedural analysis will identify relationship between applied changes by developers to cluster relevant changes. Constraint solving techniques will reason about the rationale behind the applied changes to infer the manifested general program transformation patterns. The PI will incorporate the results from this research into both undergraduate and graduate software engineering courses with the aim of maintaining the competitive vitality of the national technology workforce.</AbstractNarration>
    <MinAmdLetterDate>03/18/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>03/18/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1565827</AwardID>
    <Investigator>
      <FirstName>Na</FirstName>
      <LastName>Meng</LastName>
      <EmailAddress>nm8247@cs.vt.edu</EmailAddress>
      <StartDate>03/18/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Virginia Polytechnic Institute and State University</Name>
      <CityName>BLACKSBURG</CityName>
      <ZipCode>240610001</ZipCode>
      <PhoneNumber>5402315281</PhoneNumber>
      <StreetAddress>Sponsored Programs 0170</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Virginia</StateName>
      <StateCode>VA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>026Y</Code>
      <Text>CRII CISE Research Initiation</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8228</Code>
      <Text>CISE Resrch Initiatn Initiatve</Text>
    </ProgramReference>
  </Award>
</rootTag>
