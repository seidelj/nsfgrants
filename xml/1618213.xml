<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>TWC: Small: Thwarting Kernel-Level Malware with Secure Virtual Architecture</AwardTitle>
    <AwardEffectiveDate>09/01/2016</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2019</AwardExpirationDate>
    <AwardAmount>475074</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Deborah Shands</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Modern computer operating systems are designed to adapt to new needs by enabling extensions that can add new features or fix flaws. However, attackers can take advantage of this flexibility by hijacking extension mechanisms to insert malicious code into software; this malicious code steals secrets, corrupts data, and hides malicious activities. At present, these attacks are nearly impossible to detect and prevent. Without methods to prevent or detect such attacks, computer operating systems will be untrustworthy. This project is addressing the challenge of safe extensibility of the operating system kernel.&lt;br/&gt;&lt;br/&gt;The researcher are investigating the use of both static and dynamic analysis to automatically generate security policies. These policies dictate which data structure fields can be read and modified by each extension in order to that limit the damage that malicious kernel extensions can cause. The project is also exploring methods of statically validating that kernel extensions follow these policies. Since static analysis may, conservatively, mark benign extensions as potentially malicious, the researchers are enhancing existing operating system kernels to prevent kernel extensions from hiding malicious computations. This is accomplished by inserting code into extensions to enforce the aforementioned security policies at run-time. To minimize run-time overheads, the researchers are also investigating the use of sophisticated compiler optimizations.</AbstractNarration>
    <MinAmdLetterDate>06/10/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>06/10/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1618213</AwardID>
    <Investigator>
      <FirstName>John</FirstName>
      <LastName>Criswell</LastName>
      <EmailAddress>criswell@cs.rochester.edu</EmailAddress>
      <StartDate>06/10/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Rochester</Name>
      <CityName>Rochester</CityName>
      <ZipCode>146270140</ZipCode>
      <PhoneNumber>5852754031</PhoneNumber>
      <StreetAddress>518 HYLAN, RC BOX 270140</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <ProgramElement>
      <Code>8060</Code>
      <Text>Secure &amp;Trustworthy Cyberspace</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7434</Code>
      <Text>CNCI</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
  </Award>
</rootTag>
