<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Computer Architecture for Scripting Languages</AwardTitle>
    <AwardEffectiveDate>08/01/2015</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2018</AwardExpirationDate>
    <AwardAmount>176248</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Tao Li</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The goal of this work is to speed-up the execution of the&lt;br/&gt;most popular programming languages of the internet, namely Scripting Languages&lt;br/&gt;such as JavaScript and Python. These languages are easy to use, because&lt;br/&gt;they do not require declaring all the variables. However, this makes them very&lt;br/&gt;hard to compile efficiently. In this work, the principal investigator will design&lt;br/&gt;processor hardware that is specifically equipped to help speed-up&lt;br/&gt;these languages. Given the importance of these languages for&lt;br/&gt;web development, effective techniques to speed-up their execution&lt;br/&gt;are fundamental for the continued development of the&lt;br/&gt;web infrastructure. Such development is crucial to our&lt;br/&gt;society's efficiency, competitiveness, and wellbeing.&lt;br/&gt;&lt;br/&gt;The principal investigator will focus on several techniques.&lt;br/&gt;One of them is using speculation support to execute the most likely&lt;br/&gt;execution path of the codes, and undo the execution if another path&lt;br/&gt;was taken instead. The other technique is prediction, to predict which&lt;br/&gt;parts of the code will be executed. Finally, the third technique is reuse, where the&lt;br/&gt;processor will keep enough state in its structures to reuse&lt;br/&gt;it across invocations of the same functions.</AbstractNarration>
    <MinAmdLetterDate>07/28/2015</MinAmdLetterDate>
    <MaxAmdLetterDate>07/28/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1527223</AwardID>
    <Investigator>
      <FirstName>Josep</FirstName>
      <LastName>Torrellas</LastName>
      <EmailAddress>torrellas@cs.uiuc.edu</EmailAddress>
      <StartDate>07/28/2015</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Illinois at Urbana-Champaign</Name>
      <CityName>CHAMPAIGN</CityName>
      <ZipCode>618207473</ZipCode>
      <PhoneNumber>2173332187</PhoneNumber>
      <StreetAddress>SUITE A</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Illinois</StateName>
      <StateCode>IL</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7941</Code>
      <Text>COMPUTER ARCHITECTURE</Text>
    </ProgramReference>
  </Award>
</rootTag>
