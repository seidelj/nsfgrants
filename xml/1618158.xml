<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Testing and Analysis for Reliable Numerical Software</AwardTitle>
    <AwardEffectiveDate>07/01/2016</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2019</AwardExpirationDate>
    <AwardAmount>500000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Society increasingly depends on numerical software, which uses finite&lt;br/&gt;precision arithmetic to approximate the reals and necessarily&lt;br/&gt;introduces approximation and error. Cyber-physical systems are&lt;br/&gt;ubiquitous and rely on numerical software. Anti-lock breaks and&lt;br/&gt;medical devices such as haptic control systems for remote surgery are&lt;br/&gt;two such examples. Numerical errors in these systems can be&lt;br/&gt;disastrous. Toyota suspects such errors contributed to its costly&lt;br/&gt;acceleration problem; the Ariane 5 rocket exploded due to an overflow&lt;br/&gt;in its inertial reference system; and scientists have had to retract&lt;br/&gt;papers from prestigious journals (e.g., Nature). Techniques and tools&lt;br/&gt;for improving numerical software reliability are critically needed.&lt;br/&gt;&lt;br/&gt;This project explores practical techniques to test and analyze&lt;br/&gt;numerical software. It focuses on the two most fundamental sources of&lt;br/&gt;numerical errors: uncaught exceptions, and numerical stability and&lt;br/&gt;accuracy. The proposed techniques are centered around symbolic&lt;br/&gt;execution and guided testing, and domain insights are used to develop&lt;br/&gt;principles and heuristics to make the techniques practical. This&lt;br/&gt;project considers three main dimensions: (1) problem formulation and&lt;br/&gt;analysis strategies, (2) constraint solving, and (3) implementation&lt;br/&gt;techniques. It aims at advancing the state-of-the-art in engineering&lt;br/&gt;robust numerical software to help avoid costly, dangerous errors.</AbstractNarration>
    <MinAmdLetterDate>05/20/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>05/20/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1618158</AwardID>
    <Investigator>
      <FirstName>Zhoulai</FirstName>
      <LastName>Fu</LastName>
      <EmailAddress>zlfu@ucdavis.edu</EmailAddress>
      <StartDate>05/20/2016</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Zhendong</FirstName>
      <LastName>Su</LastName>
      <EmailAddress>su@cs.ucdavis.edu</EmailAddress>
      <StartDate>05/20/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of California-Davis</Name>
      <CityName>Davis</CityName>
      <ZipCode>956186134</ZipCode>
      <PhoneNumber>5307547700</PhoneNumber>
      <StreetAddress>OR/Sponsored Programs</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>California</StateName>
      <StateCode>CA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
  </Award>
</rootTag>
