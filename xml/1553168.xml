<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER: Synthesis in a Live Programming Environment</AwardTitle>
    <AwardEffectiveDate>01/15/2016</AwardEffectiveDate>
    <AwardExpirationDate>12/31/2020</AwardExpirationDate>
    <AwardAmount>179488</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>A live programming environment allows a programmer to immediately see the effects of changes to a program on its outputs and effectively eliminates the edit-run-debug cycle that dominates programming work flows today. Live programming is an emerging paradigm that is promising a vast change in the techniques used to develop modern software. This project combines live programming and software synthesis. By generating representative examples to illustrate code behavior, the user can more easily understand the code. If the user notices examples that do not match the intended behavior, the user can either modify the source code, or change the examples to correctly convey the behavior. Invoking a programming by example synthesis algorithm on those updated examples will automatically generate code, which is then merged with the original source code. We call this concept cooperative programming.&lt;br/&gt;&lt;br/&gt;The intellectual merits of this project include: devising novel real-time algorithms to synthesize code, investigating new fault localization techniques, and developing code repair that is intuitive and natural for the user. In addition, the project is focused on establishing a formal theoretical framework for synthesis in a feedback loop. These ideas will be evaluated in a modern, major programming language, thus making it readily accessible to programmers. In this way, the broader impact of cooperative programming is to increase programmer productivity while simultaneously lowering the barriers to entry for novice programmers, such as secondary school students.</AbstractNarration>
    <MinAmdLetterDate>01/15/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>01/15/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1553168</AwardID>
    <Investigator>
      <FirstName>Ruzica</FirstName>
      <LastName>Piskac</LastName>
      <EmailAddress>ruzica.piskac@yale.edu</EmailAddress>
      <StartDate>01/15/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Yale University</Name>
      <CityName>New Haven</CityName>
      <ZipCode>065208327</ZipCode>
      <PhoneNumber>2037854689</PhoneNumber>
      <StreetAddress>Office of Sponsored Projects</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Connecticut</StateName>
      <StateCode>CT</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
  </Award>
</rootTag>
