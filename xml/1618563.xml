<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CSR: Small: Performance and Fairness with Multiple Page Sizes</AwardTitle>
    <AwardEffectiveDate>10/01/2016</AwardEffectiveDate>
    <AwardExpirationDate>09/30/2019</AwardExpirationDate>
    <AwardAmount>500000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Yan Solihin</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Modern computing workloads such as machine learning, big data analytics, and scientific computing require enormous memory capacities. The system software that manages memory was designed for much smaller systems, and consequently, it imposes hefty performance and power penalties on modern systems. The time has come to pay this technical debt. This work comprehensively redesigns operating system and virtual machine memory management to accommodate large memories, enabling applications to obtain the performance and efficiency promised by current hardware.&lt;br/&gt;&lt;br/&gt;The goal of this research is a set of principles and a framework for the operating system and hypervisor to transparently support small and large memory pages. Large memory pages (e.g., 2MB pages for the popular x86 architecture instead of the standard 4KB) can provide significant performance benefit by dramatically reducing address translation over- heads. However, their support and adoption has been hindered by fundamental management problems arising from fragmentation and poor visibility into memory accesses. Current large page management suffers a variety of pathologies such as memory bloat and unfairness across processes and/or virtual machines, and system administrators generally disable large pages in production systems. A framework that relies on managing contiguity as a first-class resource and on tracking utilization and access frequency of memory pages will enable an OS to coordinate its currently disparate mechanisms, avoid performance pathologies, and enable applications to enjoy the performance benefits of large pages.</AbstractNarration>
    <MinAmdLetterDate>08/08/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>08/08/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1618563</AwardID>
    <Investigator>
      <FirstName>Emmett</FirstName>
      <LastName>Witchel</LastName>
      <EmailAddress>witchel@cs.utexas.edu</EmailAddress>
      <StartDate>08/08/2016</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Christopher</FirstName>
      <LastName>Rossbach</LastName>
      <EmailAddress>rossbach@cs.utexas.edu</EmailAddress>
      <StartDate>08/08/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Texas at Austin</Name>
      <CityName>Austin</CityName>
      <ZipCode>787121532</ZipCode>
      <PhoneNumber>5124716424</PhoneNumber>
      <StreetAddress>101 E. 27th Street, Suite 5.300</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Texas</StateName>
      <StateCode>TX</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
  </Award>
</rootTag>
