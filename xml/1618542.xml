<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Collaborative Research: Concurrent Software Verification with Rely/Guarantee Abstraction</AwardTitle>
    <AwardEffectiveDate>08/01/2016</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2019</AwardExpirationDate>
    <AwardAmount>249641</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>It is now widely recognized that increasing the reliability of&lt;br/&gt;concurrent software is one of the most important scientific and&lt;br/&gt;technological challenges in the emerging era of multi-core and&lt;br/&gt;distributed computing. The last decade has seen substantial advances&lt;br/&gt;in automatic verification technology to improve the reliability of&lt;br/&gt;sequential programs, and software tools that can be applied to large &lt;br/&gt;industrial code bases. Unfortunately, the underlying technology of &lt;br/&gt;such tools cannot be directly applied to concurrent programs. &lt;br/&gt;&lt;br/&gt;This project investigates scalable techniques for automatic verification of &lt;br/&gt;concurrent software. The approach uses thread-modular decomposition of &lt;br/&gt;the overall problem that does not completely decompose to the granularity &lt;br/&gt;of an individual thread. Since base components may exhibit concurrent &lt;br/&gt;behavior, the investigators develop analysis algorithms for these base components &lt;br/&gt;so that they can be automatically proven correct with respect to their environment&lt;br/&gt;description and vice-versa. This work yields automatic verification tools that &lt;br/&gt;exploit richer notions of modular reasoning about parallelism, thereby offering &lt;br/&gt;improved scalability and robustness over previous approaches. The project team&lt;br/&gt;includes graduate and undergraduate students.</AbstractNarration>
    <MinAmdLetterDate>05/19/2016</MinAmdLetterDate>
    <MaxAmdLetterDate>05/19/2016</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1618542</AwardID>
    <Investigator>
      <FirstName>Eric</FirstName>
      <LastName>Koskinen</LastName>
      <EmailAddress>eric.koskinen@yale.edu</EmailAddress>
      <StartDate>05/19/2016</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Yale University</Name>
      <CityName>New Haven</CityName>
      <ZipCode>065208327</ZipCode>
      <PhoneNumber>2037854689</PhoneNumber>
      <StreetAddress>Office of Sponsored Projects</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Connecticut</StateName>
      <StateCode>CT</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
  </Award>
</rootTag>
