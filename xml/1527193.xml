<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>AF: Small: Subdivision Methods: Correctness and Complexity</AwardTitle>
    <AwardEffectiveDate>09/01/2015</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2018</AwardExpirationDate>
    <AwardAmount>246411</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Jack Snoeyink</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Subdivision-based algorithms can solve problems from a wide variety of applications in mathematics, computer science, and the sciences. For example, these types of algorithms are used in computer graphics, mathematical biology, computational geometry, mathematical modeling, robotics, machine learning, and mathematical computation. Subdivision-based algorithms are popular because they are relatively easy to describe and implement on a computer, and they are often efficient in practice. The work in this project is to quantify and improve the effectiveness of these types of algorithms. By studying the efficiency and providing algorithms to approximate solutions to problems which are typically considered intractable, the results of this project provide techniques which can be applied to practical problems throughout the sciences.&lt;br/&gt;&lt;br/&gt;Subdivision-based algorithms recursively and adaptively subdivide a given domain into smaller regions until, in each smaller region, the behavior of a problem-specific feature can be determined. Subdivision-based algorithms are frequently used because they are parallelizable, recursive, and adaptive. More precisely, they use weak local tests and perform more subdivisions only near difficult features. These features that make subdivision-based algorithms practical, however, also make them challenging to study. For example, local tests make global topological correctness difficult and adaptive (non-uniform) subdivisions make the number of subdivisions difficult to bound. This project addresses both of the important questions of complexity and correctness for subdivision-based algorithms in the following two ways: (1) Using continuous amortization as a uniform method to compute the complexity of subdivision-based algorithms. (2) Developing topologically certified subdivision-based algorithms for geometric applications on algebraic varieties. This project extends the technique of continuous amortization to many different types of algorithms including iterative and two-dimensional subdivisions; additionally, the project develops subdivision-based algorithms to approximate previously intractable problems such as the medial axis and intersections of surfaces.</AbstractNarration>
    <MinAmdLetterDate>08/20/2015</MinAmdLetterDate>
    <MaxAmdLetterDate>08/20/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1527193</AwardID>
    <Investigator>
      <FirstName>Michael</FirstName>
      <LastName>Burr</LastName>
      <EmailAddress>burr2@clemson.edu</EmailAddress>
      <StartDate>08/20/2015</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Clemson University</Name>
      <CityName>CLEMSON</CityName>
      <ZipCode>296340001</ZipCode>
      <PhoneNumber>8646562424</PhoneNumber>
      <StreetAddress>300 BRACKETT HALL</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>South Carolina</StateName>
      <StateCode>SC</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7796</Code>
      <Text>ALGORITHMIC FOUNDATIONS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7933</Code>
      <Text>NUM, SYMBOL, &amp; ALGEBRA COMPUT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9150</Code>
      <Text>EXP PROG TO STIM COMP RES</Text>
    </ProgramReference>
  </Award>
</rootTag>
