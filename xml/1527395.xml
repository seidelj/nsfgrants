<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Automating Software Verification using Natural Proofs</AwardTitle>
    <AwardEffectiveDate>07/15/2015</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2018</AwardExpirationDate>
    <AwardAmount>500000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The automated algorithmic verification of software, even when assisted by programmer annotations with invariants, is at an impasse today because the underlying technical problems are not solvable using computers (undecidable). Consequently, current tools perform very poorly for most non-shallow specifications of software, which do not admit decidable verification, and hence require manual help throughout the verification process. This has lead to limited adoption of these tools by the wider population of programmers untrained in formal methods. This project addresses this problem through a new radical approach called natural proofs. &lt;br/&gt;&lt;br/&gt;Natural proofs are a subclass of proofs that can be effectively and efficiently searched for, and embody common tactics that people use and that work for most programs. Natural proofs hence yield automatic though incomplete techniques that work in most situations, side-stepping undecidability barriers. The project's goal is to build natural proof techniques for the verification of a variety of security properties, including privacy, integrity, and access control, that span across entire systems, and that help programmers verify their programs with very little annotation overhead. Applications include more automated verification of security properties of software, such as an Android platform, as well as scalable auto-grading of programming exercises in Massive Open Online Courses (MOOCs).</AbstractNarration>
    <MinAmdLetterDate>06/30/2015</MinAmdLetterDate>
    <MaxAmdLetterDate>06/30/2015</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1527395</AwardID>
    <Investigator>
      <FirstName>Madhusudan</FirstName>
      <LastName>Parthasarathy</LastName>
      <EmailAddress>madhu@cs.uiuc.edu</EmailAddress>
      <StartDate>06/30/2015</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Illinois at Urbana-Champaign</Name>
      <CityName>CHAMPAIGN</CityName>
      <ZipCode>618207473</ZipCode>
      <PhoneNumber>2173332187</PhoneNumber>
      <StreetAddress>SUITE A</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Illinois</StateName>
      <StateCode>IL</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7923</Code>
      <Text>SMALL PROJECT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
  </Award>
</rootTag>
